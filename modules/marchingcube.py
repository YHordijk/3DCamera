import numpy as np 
from math import sin, cos, pi


edge_index = [
	(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 3, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 9, 0, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 3, 1, 8, 1, 9,-1,-1,-1,-1,-1,-1,-1),
	(10, 1, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 3, 0, 1, 2,10,-1,-1,-1,-1,-1,-1,-1),
	( 9, 0, 2, 9, 2,10,-1,-1,-1,-1,-1,-1,-1),
	( 3, 2, 8, 2,10, 8, 8,10, 9,-1,-1,-1,-1),
	(11, 2, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	(11, 2, 0,11, 0, 8,-1,-1,-1,-1,-1,-1,-1),
	(11, 2, 3, 0, 1, 9,-1,-1,-1,-1,-1,-1,-1),
	( 2, 1,11, 1, 9,11,11, 9, 8,-1,-1,-1,-1),
	(10, 1, 3,10, 3,11,-1,-1,-1,-1,-1,-1,-1),
	( 1, 0,10, 0, 8,10,10, 8,11,-1,-1,-1,-1),
	( 0, 3, 9, 3,11, 9, 9,11,10,-1,-1,-1,-1),
	( 8,10, 9, 8,11,10,-1,-1,-1,-1,-1,-1,-1),
	( 8, 4, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 3, 0, 4, 3, 4, 7,-1,-1,-1,-1,-1,-1,-1),
	( 1, 9, 0, 8, 4, 7,-1,-1,-1,-1,-1,-1,-1),
	( 9, 4, 1, 4, 7, 1, 1, 7, 3,-1,-1,-1,-1),
	(10, 1, 2, 8, 4, 7,-1,-1,-1,-1,-1,-1,-1),
	( 2,10, 1, 0, 4, 7, 0, 7, 3,-1,-1,-1,-1),
	( 4, 7, 8, 0, 2,10, 0,10, 9,-1,-1,-1,-1),
	( 2, 7, 3, 2, 9, 7, 7, 9, 4, 2,10, 9,-1),
	( 2, 3,11, 7, 8, 4,-1,-1,-1,-1,-1,-1,-1),
	( 7,11, 4,11, 2, 4, 4, 2, 0,-1,-1,-1,-1),
	( 3,11, 2, 4, 7, 8, 9, 0, 1,-1,-1,-1,-1),
	( 2, 7,11, 2, 1, 7, 1, 4, 7, 1, 9, 4,-1),
	( 8, 4, 7,11,10, 1,11, 1, 3,-1,-1,-1,-1),
	(11, 4, 7, 1, 4,11, 1,11,10, 1, 0, 4,-1),
	( 3, 8, 0, 7,11, 4,11, 9, 4,11,10, 9,-1),
	( 7,11, 4, 4,11, 9,11,10, 9,-1,-1,-1,-1),
	( 9, 5, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 3, 0, 8, 4, 9, 5,-1,-1,-1,-1,-1,-1,-1),
	( 5, 4, 0, 5, 0, 1,-1,-1,-1,-1,-1,-1,-1),
	( 4, 8, 5, 8, 3, 5, 5, 3, 1,-1,-1,-1,-1),
	( 2,10, 1, 9, 5, 4,-1,-1,-1,-1,-1,-1,-1),
	( 0, 8, 3, 5, 4, 9,10, 1, 2,-1,-1,-1,-1),
	(10, 5, 2, 5, 4, 2, 2, 4, 0,-1,-1,-1,-1),
	( 3, 4, 8, 3, 2, 4, 2, 5, 4, 2,10, 5,-1),
	(11, 2, 3, 9, 5, 4,-1,-1,-1,-1,-1,-1,-1),
	( 9, 5, 4, 8,11, 2, 8, 2, 0,-1,-1,-1,-1),
	( 3,11, 2, 1, 5, 4, 1, 4, 0,-1,-1,-1,-1),
	( 8, 5, 4, 2, 5, 8, 2, 8,11, 2, 1, 5,-1),
	( 5, 4, 9, 1, 3,11, 1,11,10,-1,-1,-1,-1),
	( 0, 9, 1, 4, 8, 5, 8,10, 5, 8,11,10,-1),
	( 3, 4, 0, 3,10, 4, 4,10, 5, 3,11,10,-1),
	( 4, 8, 5, 5, 8,10, 8,11,10,-1,-1,-1,-1),
	( 9, 5, 7, 9, 7, 8,-1,-1,-1,-1,-1,-1,-1),
	( 0, 9, 3, 9, 5, 3, 3, 5, 7,-1,-1,-1,-1),
	( 8, 0, 7, 0, 1, 7, 7, 1, 5,-1,-1,-1,-1),
	( 1, 7, 3, 1, 5, 7,-1,-1,-1,-1,-1,-1,-1),
	( 1, 2,10, 5, 7, 8, 5, 8, 9,-1,-1,-1,-1),
	( 9, 1, 0,10, 5, 2, 5, 3, 2, 5, 7, 3,-1),
	( 5, 2,10, 8, 2, 5, 8, 5, 7, 8, 0, 2,-1),
	(10, 5, 2, 2, 5, 3, 5, 7, 3,-1,-1,-1,-1),
	(11, 2, 3, 8, 9, 5, 8, 5, 7,-1,-1,-1,-1),
	( 9, 2, 0, 9, 7, 2, 2, 7,11, 9, 5, 7,-1),
	( 0, 3, 8, 2, 1,11, 1, 7,11, 1, 5, 7,-1),
	( 2, 1,11,11, 1, 7, 1, 5, 7,-1,-1,-1,-1),
	( 3, 9, 1, 3, 8, 9, 7,11,10, 7,10, 5,-1),
	( 9, 1, 0,10, 7,11,10, 5, 7,-1,-1,-1,-1),
	( 3, 8, 0, 7,10, 5, 7,11,10,-1,-1,-1,-1),
	(11, 5, 7,11,10, 5,-1,-1,-1,-1,-1,-1,-1),
	(10, 6, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 3, 0,10, 6, 5,-1,-1,-1,-1,-1,-1,-1),
	( 0, 1, 9, 5,10, 6,-1,-1,-1,-1,-1,-1,-1),
	(10, 6, 5, 9, 8, 3, 9, 3, 1,-1,-1,-1,-1),
	( 1, 2, 6, 1, 6, 5,-1,-1,-1,-1,-1,-1,-1),
	( 0, 8, 3, 2, 6, 5, 2, 5, 1,-1,-1,-1,-1),
	( 5, 9, 6, 9, 0, 6, 6, 0, 2,-1,-1,-1,-1),
	( 9, 6, 5, 3, 6, 9, 3, 9, 8, 3, 2, 6,-1),
	( 3,11, 2,10, 6, 5,-1,-1,-1,-1,-1,-1,-1),
	( 6, 5,10, 2, 0, 8, 2, 8,11,-1,-1,-1,-1),
	( 1, 9, 0, 6, 5,10,11, 2, 3,-1,-1,-1,-1),
	( 1,10, 2, 5, 9, 6, 9,11, 6, 9, 8,11,-1),
	(11, 6, 3, 6, 5, 3, 3, 5, 1,-1,-1,-1,-1),
	( 0, 5, 1, 0,11, 5, 5,11, 6, 0, 8,11,-1),
	( 0, 5, 9, 0, 3, 5, 3, 6, 5, 3,11, 6,-1),
	( 5, 9, 6, 6, 9,11, 9, 8,11,-1,-1,-1,-1),
	(10, 6, 5, 4, 7, 8,-1,-1,-1,-1,-1,-1,-1),
	( 5,10, 6, 7, 3, 0, 7, 0, 4,-1,-1,-1,-1),
	( 5,10, 6, 0, 1, 9, 8, 4, 7,-1,-1,-1,-1),
	( 4, 5, 9, 6, 7,10, 7, 1,10, 7, 3, 1,-1),
	( 7, 8, 4, 5, 1, 2, 5, 2, 6,-1,-1,-1,-1),
	( 4, 1, 0, 4, 5, 1, 6, 7, 3, 6, 3, 2,-1),
	( 9, 4, 5, 8, 0, 7, 0, 6, 7, 0, 2, 6,-1),
	( 4, 5, 9, 6, 3, 2, 6, 7, 3,-1,-1,-1,-1),
	( 7, 8, 4, 2, 3,11,10, 6, 5,-1,-1,-1,-1),
	(11, 6, 7,10, 2, 5, 2, 4, 5, 2, 0, 4,-1),
	(11, 6, 7, 8, 0, 3, 1,10, 2, 9, 4, 5,-1),
	( 6, 7,11, 1,10, 2, 9, 4, 5,-1,-1,-1,-1),
	( 6, 7,11, 4, 5, 8, 5, 3, 8, 5, 1, 3,-1),
	( 6, 7,11, 4, 1, 0, 4, 5, 1,-1,-1,-1,-1),
	( 4, 5, 9, 3, 8, 0,11, 6, 7,-1,-1,-1,-1),
	( 9, 4, 5, 7,11, 6,-1,-1,-1,-1,-1,-1,-1),
	(10, 6, 4,10, 4, 9,-1,-1,-1,-1,-1,-1,-1),
	( 8, 3, 0, 9,10, 6, 9, 6, 4,-1,-1,-1,-1),
	( 1,10, 0,10, 6, 0, 0, 6, 4,-1,-1,-1,-1),
	( 8, 6, 4, 8, 1, 6, 6, 1,10, 8, 3, 1,-1),
	( 9, 1, 4, 1, 2, 4, 4, 2, 6,-1,-1,-1,-1),
	( 1, 0, 9, 3, 2, 8, 2, 4, 8, 2, 6, 4,-1),
	( 2, 4, 0, 2, 6, 4,-1,-1,-1,-1,-1,-1,-1),
	( 3, 2, 8, 8, 2, 4, 2, 6, 4,-1,-1,-1,-1),
	( 2, 3,11, 6, 4, 9, 6, 9,10,-1,-1,-1,-1),
	( 0,10, 2, 0, 9,10, 4, 8,11, 4,11, 6,-1),
	(10, 2, 1,11, 6, 3, 6, 0, 3, 6, 4, 0,-1),
	(10, 2, 1,11, 4, 8,11, 6, 4,-1,-1,-1,-1),
	( 1, 4, 9,11, 4, 1,11, 1, 3,11, 6, 4,-1),
	( 0, 9, 1, 4,11, 6, 4, 8,11,-1,-1,-1,-1),
	(11, 6, 3, 3, 6, 0, 6, 4, 0,-1,-1,-1,-1),
	( 8, 6, 4, 8,11, 6,-1,-1,-1,-1,-1,-1,-1),
	( 6, 7,10, 7, 8,10,10, 8, 9,-1,-1,-1,-1),
	( 9, 3, 0, 6, 3, 9, 6, 9,10, 6, 7, 3,-1),
	( 6, 1,10, 6, 7, 1, 7, 0, 1, 7, 8, 0,-1),
	( 6, 7,10,10, 7, 1, 7, 3, 1,-1,-1,-1,-1),
	( 7, 2, 6, 7, 9, 2, 2, 9, 1, 7, 8, 9,-1),
	( 1, 0, 9, 3, 6, 7, 3, 2, 6,-1,-1,-1,-1),
	( 8, 0, 7, 7, 0, 6, 0, 2, 6,-1,-1,-1,-1),
	( 2, 7, 3, 2, 6, 7,-1,-1,-1,-1,-1,-1,-1),
	( 7,11, 6, 3, 8, 2, 8,10, 2, 8, 9,10,-1),
	(11, 6, 7,10, 0, 9,10, 2, 0,-1,-1,-1,-1),
	( 2, 1,10, 7,11, 6, 8, 0, 3,-1,-1,-1,-1),
	( 1,10, 2, 6, 7,11,-1,-1,-1,-1,-1,-1,-1),
	( 7,11, 6, 3, 9, 1, 3, 8, 9,-1,-1,-1,-1),
	( 9, 1, 0,11, 6, 7,-1,-1,-1,-1,-1,-1,-1),
	( 0, 3, 8,11, 6, 7,-1,-1,-1,-1,-1,-1,-1),
	(11, 6, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	(11, 7, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 0, 8, 3,11, 7, 6,-1,-1,-1,-1,-1,-1,-1),
	( 9, 0, 1,11, 7, 6,-1,-1,-1,-1,-1,-1,-1),
	( 7, 6,11, 3, 1, 9, 3, 9, 8,-1,-1,-1,-1),
	( 1, 2,10, 6,11, 7,-1,-1,-1,-1,-1,-1,-1),
	( 2,10, 1, 7, 6,11, 8, 3, 0,-1,-1,-1,-1),
	(11, 7, 6,10, 9, 0,10, 0, 2,-1,-1,-1,-1),
	( 7, 6,11, 3, 2, 8, 8, 2,10, 8,10, 9,-1),
	( 2, 3, 7, 2, 7, 6,-1,-1,-1,-1,-1,-1,-1),
	( 8, 7, 0, 7, 6, 0, 0, 6, 2,-1,-1,-1,-1),
	( 1, 9, 0, 3, 7, 6, 3, 6, 2,-1,-1,-1,-1),
	( 7, 6, 2, 7, 2, 9, 2, 1, 9, 7, 9, 8,-1),
	( 6,10, 7,10, 1, 7, 7, 1, 3,-1,-1,-1,-1),
	( 6,10, 1, 6, 1, 7, 7, 1, 0, 7, 0, 8,-1),
	( 9, 0, 3, 6, 9, 3, 6,10, 9, 6, 3, 7,-1),
	( 6,10, 7, 7,10, 8,10, 9, 8,-1,-1,-1,-1),
	( 8, 4, 6, 8, 6,11,-1,-1,-1,-1,-1,-1,-1),
	(11, 3, 6, 3, 0, 6, 6, 0, 4,-1,-1,-1,-1),
	( 0, 1, 9, 4, 6,11, 4,11, 8,-1,-1,-1,-1),
	( 1, 9, 4,11, 1, 4,11, 3, 1,11, 4, 6,-1),
	(10, 1, 2,11, 8, 4,11, 4, 6,-1,-1,-1,-1),
	(10, 1, 2,11, 3, 6, 6, 3, 0, 6, 0, 4,-1),
	( 0, 2,10, 0,10, 9, 4,11, 8, 4, 6,11,-1),
	( 2,11, 3, 6, 9, 4, 6,10, 9,-1,-1,-1,-1),
	( 3, 8, 2, 8, 4, 2, 2, 4, 6,-1,-1,-1,-1),
	( 2, 0, 4, 2, 4, 6,-1,-1,-1,-1,-1,-1,-1),
	( 1, 9, 0, 3, 8, 2, 2, 8, 4, 2, 4, 6,-1),
	( 9, 4, 1, 1, 4, 2, 4, 6, 2,-1,-1,-1,-1),
	( 8, 4, 6, 8, 6, 1, 6,10, 1, 8, 1, 3,-1),
	( 1, 0,10,10, 0, 6, 0, 4, 6,-1,-1,-1,-1),
	( 8, 0, 3, 9, 6,10, 9, 4, 6,-1,-1,-1,-1),
	(10, 4, 6,10, 9, 4,-1,-1,-1,-1,-1,-1,-1),
	( 9, 5, 4, 7, 6,11,-1,-1,-1,-1,-1,-1,-1),
	( 4, 9, 5, 3, 0, 8,11, 7, 6,-1,-1,-1,-1),
	( 6,11, 7, 4, 0, 1, 4, 1, 5,-1,-1,-1,-1),
	( 6,11, 7, 4, 8, 5, 5, 8, 3, 5, 3, 1,-1),
	( 6,11, 7, 1, 2,10, 9, 5, 4,-1,-1,-1,-1),
	(11, 7, 6, 8, 3, 0, 1, 2,10, 9, 5, 4,-1),
	(11, 7, 6,10, 5, 2, 2, 5, 4, 2, 4, 0,-1),
	( 7, 4, 8, 2,11, 3,10, 5, 6,-1,-1,-1,-1),
	( 4, 9, 5, 6, 2, 3, 6, 3, 7,-1,-1,-1,-1),
	( 9, 5, 4, 8, 7, 0, 0, 7, 6, 0, 6, 2,-1),
	( 4, 0, 1, 4, 1, 5, 6, 3, 7, 6, 2, 3,-1),
	( 7, 4, 8, 5, 2, 1, 5, 6, 2,-1,-1,-1,-1),
	( 4, 9, 5, 6,10, 7, 7,10, 1, 7, 1, 3,-1),
	( 5, 6,10, 0, 9, 1, 8, 7, 4,-1,-1,-1,-1),
	( 5, 6,10, 7, 0, 3, 7, 4, 0,-1,-1,-1,-1),
	(10, 5, 6, 4, 8, 7,-1,-1,-1,-1,-1,-1,-1),
	( 5, 6, 9, 6,11, 9, 9,11, 8,-1,-1,-1,-1),
	( 0, 9, 5, 0, 5, 3, 3, 5, 6, 3, 6,11,-1),
	( 0, 1, 5, 0, 5,11, 5, 6,11, 0,11, 8,-1),
	(11, 3, 6, 6, 3, 5, 3, 1, 5,-1,-1,-1,-1),
	( 1, 2,10, 5, 6, 9, 9, 6,11, 9,11, 8,-1),
	( 1, 0, 9, 6,10, 5,11, 3, 2,-1,-1,-1,-1),
	( 6,10, 5, 2, 8, 0, 2,11, 8,-1,-1,-1,-1),
	( 3, 2,11,10, 5, 6,-1,-1,-1,-1,-1,-1,-1),
	( 9, 5, 6, 3, 9, 6, 3, 8, 9, 3, 6, 2,-1),
	( 5, 6, 9, 9, 6, 0, 6, 2, 0,-1,-1,-1,-1),
	( 0, 3, 8, 2, 5, 6, 2, 1, 5,-1,-1,-1,-1),
	( 1, 6, 2, 1, 5, 6,-1,-1,-1,-1,-1,-1,-1),
	(10, 5, 6, 9, 3, 8, 9, 1, 3,-1,-1,-1,-1),
	( 0, 9, 1, 5, 6,10,-1,-1,-1,-1,-1,-1,-1),
	( 8, 0, 3,10, 5, 6,-1,-1,-1,-1,-1,-1,-1),
	(10, 5, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	(11, 7, 5,11, 5,10,-1,-1,-1,-1,-1,-1,-1),
	( 3, 0, 8, 7, 5,10, 7,10,11,-1,-1,-1,-1),
	( 9, 0, 1,10,11, 7,10, 7, 5,-1,-1,-1,-1),
	( 3, 1, 9, 3, 9, 8, 7,10,11, 7, 5,10,-1),
	( 2,11, 1,11, 7, 1, 1, 7, 5,-1,-1,-1,-1),
	( 0, 8, 3, 2,11, 1, 1,11, 7, 1, 7, 5,-1),
	( 9, 0, 2, 9, 2, 7, 2,11, 7, 9, 7, 5,-1),
	(11, 3, 2, 8, 5, 9, 8, 7, 5,-1,-1,-1,-1),
	(10, 2, 5, 2, 3, 5, 5, 3, 7,-1,-1,-1,-1),
	( 5,10, 2, 8, 5, 2, 8, 7, 5, 8, 2, 0,-1),
	( 9, 0, 1,10, 2, 5, 5, 2, 3, 5, 3, 7,-1),
	( 1,10, 2, 5, 8, 7, 5, 9, 8,-1,-1,-1,-1),
	( 1, 3, 7, 1, 7, 5,-1,-1,-1,-1,-1,-1,-1),
	( 8, 7, 0, 0, 7, 1, 7, 5, 1,-1,-1,-1,-1),
	( 0, 3, 9, 9, 3, 5, 3, 7, 5,-1,-1,-1,-1),
	( 9, 7, 5, 9, 8, 7,-1,-1,-1,-1,-1,-1,-1),
	( 4, 5, 8, 5,10, 8, 8,10,11,-1,-1,-1,-1),
	( 3, 0, 4, 3, 4,10, 4, 5,10, 3,10,11,-1),
	( 0, 1, 9, 4, 5, 8, 8, 5,10, 8,10,11,-1),
	( 5, 9, 4, 1,11, 3, 1,10,11,-1,-1,-1,-1),
	( 8, 4, 5, 2, 8, 5, 2,11, 8, 2, 5, 1,-1),
	( 3, 2,11, 1, 4, 5, 1, 0, 4,-1,-1,-1,-1),
	( 9, 4, 5, 8, 2,11, 8, 0, 2,-1,-1,-1,-1),
	(11, 3, 2, 9, 4, 5,-1,-1,-1,-1,-1,-1,-1),
	( 3, 8, 4, 3, 4, 2, 2, 4, 5, 2, 5,10,-1),
	(10, 2, 5, 5, 2, 4, 2, 0, 4,-1,-1,-1,-1),
	( 0, 3, 8, 5, 9, 4,10, 2, 1,-1,-1,-1,-1),
	( 2, 1,10, 9, 4, 5,-1,-1,-1,-1,-1,-1,-1),
	( 4, 5, 8, 8, 5, 3, 5, 1, 3,-1,-1,-1,-1),
	( 5, 0, 4, 5, 1, 0,-1,-1,-1,-1,-1,-1,-1),
	( 3, 8, 0, 4, 5, 9,-1,-1,-1,-1,-1,-1,-1),
	( 9, 4, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 7, 4,11, 4, 9,11,11, 9,10,-1,-1,-1,-1),
	( 3, 0, 8, 7, 4,11,11, 4, 9,11, 9,10,-1),
	(11, 7, 4, 1,11, 4, 1,10,11, 1, 4, 0,-1),
	( 8, 7, 4,11, 1,10,11, 3, 1,-1,-1,-1,-1),
	( 2,11, 7, 2, 7, 1, 1, 7, 4, 1, 4, 9,-1),
	( 3, 2,11, 4, 8, 7, 9, 1, 0,-1,-1,-1,-1),
	( 7, 4,11,11, 4, 2, 4, 0, 2,-1,-1,-1,-1),
	( 2,11, 3, 7, 4, 8,-1,-1,-1,-1,-1,-1,-1),
	( 2, 3, 7, 2, 7, 9, 7, 4, 9, 2, 9,10,-1),
	( 4, 8, 7, 0,10, 2, 0, 9,10,-1,-1,-1,-1),
	( 2, 1,10, 0, 7, 4, 0, 3, 7,-1,-1,-1,-1),
	(10, 2, 1, 8, 7, 4,-1,-1,-1,-1,-1,-1,-1),
	( 9, 1, 4, 4, 1, 7, 1, 3, 7,-1,-1,-1,-1),
	( 1, 0, 9, 8, 7, 4,-1,-1,-1,-1,-1,-1,-1),
	( 3, 4, 0, 3, 7, 4,-1,-1,-1,-1,-1,-1,-1),
	( 8, 7, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 9,10, 8,10,11,-1,-1,-1,-1,-1,-1,-1),
	( 0, 9, 3, 3, 9,11, 9,10,11,-1,-1,-1,-1),
	( 1,10, 0, 0,10, 8,10,11, 8,-1,-1,-1,-1),
	(10, 3, 1,10,11, 3,-1,-1,-1,-1,-1,-1,-1),
	( 2,11, 1, 1,11, 9,11, 8, 9,-1,-1,-1,-1),
	(11, 3, 2, 0, 9, 1,-1,-1,-1,-1,-1,-1,-1),
	(11, 0, 2,11, 8, 0,-1,-1,-1,-1,-1,-1,-1),
	(11, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 3, 8, 2, 2, 8,10, 8, 9,10,-1,-1,-1,-1),
	( 9, 2, 0, 9,10, 2,-1,-1,-1,-1,-1,-1,-1),
	( 8, 0, 3, 1,10, 2,-1,-1,-1,-1,-1,-1,-1),
	(10, 2, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 1, 3, 8, 9, 1,-1,-1,-1,-1,-1,-1,-1),
	( 9, 1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	( 8, 0, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1),
	(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1) ]

offsets = np.asarray([
	(0,0,0),
	(1,0,0),
	(1,1,0),
	(0,1,0),
	(0,0,1),
	(1,0,1),
	(1,1,1),
	(0,1,1)])

edge_conn = np.asarray([
	(0,1),
	(1,2),
	(3,2),
	(0,3),
	(4,5),
	(5,6),
	(7,6),
	(4,7),
	(0,4),
	(1,5),
	(2,6),
	(3,7)])



class Mesh:
	def __init__(self, grid=None, isovalue=0.5, spacing=1, offset=0):
		self.isovalue = isovalue
		self.spacing = spacing
		self.offset = offset

		if type(grid) == np.ndarray:
			self.mesh = self.load_mesh(grid)
			



	def load_mesh(self, a):

		triangles = []

		if  not a.min() < self.isovalue < a.max():
			return

		for x in reversed(range(a.shape[0]-1)):
			for y in reversed(range(a.shape[1]-1)):
				for z in reversed(range(a.shape[2]-1)):
					p = np.asarray((x,y,z)) * self.spacing

					# vals = np.array([a[x, y, z],
					# 				 a[x, y, z+1],
					# 				 a[x, y+1, z],
					# 				 a[x, y+1, z+1],
					# 				 a[x+1, y, z], 
					# 				 a[x+1, y, z+1], 
					# 				 a[x+1, y+1, z],
					# 				 a[x+1, y+1, z+1]])

					vals = np.array([a[x, y, z],
									 a[x+1, y, z],
									 a[x+1, y+1, z],
									 a[x, y+1, z],
									 a[x, y, z+1],
									 a[x+1, y, z+1],
									 a[x+1, y+1, z+1],
									 a[x, y+1, z+1],])

					verteces = np.where(vals<=self.isovalue, 1, 0)
					edges = self.get_edges_from_verteces(verteces)

					for i in range(len(edges)//3):
						i_edges = edges[3*i:3*i+3]
						new_triangle = []
						for i_edge in i_edges:
							i_verteces = edge_conn[i_edge]
							v1 = vals[i_verteces[0]]
							v2 = vals[i_verteces[1]]

							o1 = offsets[i_verteces[0]]
							o2 = offsets[i_verteces[1]]

							offset = o1 + (self.isovalue - v1) * (o2 - o1) / (v2 - v1) * self.spacing
							new_triangle.append((p + offset))
						triangles.append(new_triangle)


		return np.asarray(triangles) + self.offset


	def get_edges_from_verteces(self, verteces):
		'''
		Returns the intersected edges based on the binary repr of the verteces list.
		Verteces is of the format [b1,...,bn] where b is either 1 or 0
		We first convert verteces into a int and then return the edges corresponding
		to the int
		'''

		n = sum([n*2**i for i,n in enumerate(verteces)])
		edges = np.asarray(edge_index[n])
		edges += 1
		edges = edges[np.nonzero(edges)] - 1

		return edges


	def rotate(self, rotation):
		r = rotation[0]
		Rx = np.array(([	  1, 	  0,	   0],
					   [	  0, cos(r), -sin(r)],
					   [      0, sin(r),  cos(r)]))

		r = rotation[1]
		Ry = np.array(([ cos(r),  	   0, sin(r)],
					   [ 	  0, 	   1,	   0],
					   [-sin(r), 	   0, cos(r)]))

		r = rotation[2]
		Rz = np.array(([ cos(r), -sin(r), 	   0],
					   [ sin(r),  cos(r), 	   0],
					   [ 	  0, 	   0, 	   1]))

		R = Rx@Ry@Rz
		new_mesh = []
		for t in self.mesh:
			new_mesh.append((R @ t.T).T)

		self.mesh = np.asarray(new_mesh)






if __name__ == '__main__':
	array = np.array([[[1,0,0],[0,0,0],[0,0,0]],
					  [[0,0,0],[0,1,0],[0,0,0]],
					  [[0,0,0],[0,0,0],[0,0,0]]])

	triangles = marching_cubes(array, 0.5, 1)
	[print(t) for t in triangles]

	print(np.asarray(np.asarray(triangles)))
	# ranges = (-1,1,-1,1,-1,1)
	# points = 10
	# x, y, z = np.linspace(ranges[0], ranges[1], points), np.linspace(ranges[2], ranges[3], points), np.linspace(ranges[4], ranges[5], points)
	# x, y, z = np.meshgrid(x, y, z)
	# x, y, z = x.flatten(), y.flatten(), z.flatten()


